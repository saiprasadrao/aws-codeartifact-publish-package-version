import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { CodeartifactClient } from "./CodeartifactClient";
import {
  AssociateExternalConnectionCommandInput,
  AssociateExternalConnectionCommandOutput,
} from "./commands/AssociateExternalConnectionCommand";
import {
  CopyPackageVersionsCommandInput,
  CopyPackageVersionsCommandOutput,
} from "./commands/CopyPackageVersionsCommand";
import {
  CreateDomainCommandInput,
  CreateDomainCommandOutput,
} from "./commands/CreateDomainCommand";
import {
  CreateRepositoryCommandInput,
  CreateRepositoryCommandOutput,
} from "./commands/CreateRepositoryCommand";
import {
  DeleteDomainCommandInput,
  DeleteDomainCommandOutput,
} from "./commands/DeleteDomainCommand";
import {
  DeleteDomainPermissionsPolicyCommandInput,
  DeleteDomainPermissionsPolicyCommandOutput,
} from "./commands/DeleteDomainPermissionsPolicyCommand";
import {
  DeletePackageCommandInput,
  DeletePackageCommandOutput,
} from "./commands/DeletePackageCommand";
import {
  DeletePackageVersionsCommandInput,
  DeletePackageVersionsCommandOutput,
} from "./commands/DeletePackageVersionsCommand";
import {
  DeleteRepositoryCommandInput,
  DeleteRepositoryCommandOutput,
} from "./commands/DeleteRepositoryCommand";
import {
  DeleteRepositoryPermissionsPolicyCommandInput,
  DeleteRepositoryPermissionsPolicyCommandOutput,
} from "./commands/DeleteRepositoryPermissionsPolicyCommand";
import {
  DescribeDomainCommandInput,
  DescribeDomainCommandOutput,
} from "./commands/DescribeDomainCommand";
import {
  DescribePackageCommandInput,
  DescribePackageCommandOutput,
} from "./commands/DescribePackageCommand";
import {
  DescribePackageVersionCommandInput,
  DescribePackageVersionCommandOutput,
} from "./commands/DescribePackageVersionCommand";
import {
  DescribeRepositoryCommandInput,
  DescribeRepositoryCommandOutput,
} from "./commands/DescribeRepositoryCommand";
import {
  DisassociateExternalConnectionCommandInput,
  DisassociateExternalConnectionCommandOutput,
} from "./commands/DisassociateExternalConnectionCommand";
import {
  DisposePackageVersionsCommandInput,
  DisposePackageVersionsCommandOutput,
} from "./commands/DisposePackageVersionsCommand";
import {
  GetAuthorizationTokenCommandInput,
  GetAuthorizationTokenCommandOutput,
} from "./commands/GetAuthorizationTokenCommand";
import {
  GetDomainPermissionsPolicyCommandInput,
  GetDomainPermissionsPolicyCommandOutput,
} from "./commands/GetDomainPermissionsPolicyCommand";
import {
  GetPackageVersionAssetCommandInput,
  GetPackageVersionAssetCommandOutput,
} from "./commands/GetPackageVersionAssetCommand";
import {
  GetPackageVersionReadmeCommandInput,
  GetPackageVersionReadmeCommandOutput,
} from "./commands/GetPackageVersionReadmeCommand";
import {
  GetRepositoryEndpointCommandInput,
  GetRepositoryEndpointCommandOutput,
} from "./commands/GetRepositoryEndpointCommand";
import {
  GetRepositoryPermissionsPolicyCommandInput,
  GetRepositoryPermissionsPolicyCommandOutput,
} from "./commands/GetRepositoryPermissionsPolicyCommand";
import {
  ListDomainsCommandInput,
  ListDomainsCommandOutput,
} from "./commands/ListDomainsCommand";
import {
  ListPackagesCommandInput,
  ListPackagesCommandOutput,
} from "./commands/ListPackagesCommand";
import {
  ListPackageVersionAssetsCommandInput,
  ListPackageVersionAssetsCommandOutput,
} from "./commands/ListPackageVersionAssetsCommand";
import {
  ListPackageVersionDependenciesCommandInput,
  ListPackageVersionDependenciesCommandOutput,
} from "./commands/ListPackageVersionDependenciesCommand";
import {
  ListPackageVersionsCommandInput,
  ListPackageVersionsCommandOutput,
} from "./commands/ListPackageVersionsCommand";
import {
  ListRepositoriesCommandInput,
  ListRepositoriesCommandOutput,
} from "./commands/ListRepositoriesCommand";
import {
  ListRepositoriesInDomainCommandInput,
  ListRepositoriesInDomainCommandOutput,
} from "./commands/ListRepositoriesInDomainCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  PublishPackageVersionCommandInput,
  PublishPackageVersionCommandOutput,
} from "./commands/PublishPackageVersionCommand";
import {
  PutDomainPermissionsPolicyCommandInput,
  PutDomainPermissionsPolicyCommandOutput,
} from "./commands/PutDomainPermissionsPolicyCommand";
import {
  PutPackageOriginConfigurationCommandInput,
  PutPackageOriginConfigurationCommandOutput,
} from "./commands/PutPackageOriginConfigurationCommand";
import {
  PutRepositoryPermissionsPolicyCommandInput,
  PutRepositoryPermissionsPolicyCommandOutput,
} from "./commands/PutRepositoryPermissionsPolicyCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdatePackageVersionsStatusCommandInput,
  UpdatePackageVersionsStatusCommandOutput,
} from "./commands/UpdatePackageVersionsStatusCommand";
import {
  UpdateRepositoryCommandInput,
  UpdateRepositoryCommandOutput,
} from "./commands/UpdateRepositoryCommand";
export interface Codeartifact {
  associateExternalConnection(
    args: AssociateExternalConnectionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AssociateExternalConnectionCommandOutput>;
  associateExternalConnection(
    args: AssociateExternalConnectionCommandInput,
    cb: (err: any, data?: AssociateExternalConnectionCommandOutput) => void
  ): void;
  associateExternalConnection(
    args: AssociateExternalConnectionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AssociateExternalConnectionCommandOutput) => void
  ): void;
  copyPackageVersions(
    args: CopyPackageVersionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CopyPackageVersionsCommandOutput>;
  copyPackageVersions(
    args: CopyPackageVersionsCommandInput,
    cb: (err: any, data?: CopyPackageVersionsCommandOutput) => void
  ): void;
  copyPackageVersions(
    args: CopyPackageVersionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CopyPackageVersionsCommandOutput) => void
  ): void;
  createDomain(
    args: CreateDomainCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateDomainCommandOutput>;
  createDomain(
    args: CreateDomainCommandInput,
    cb: (err: any, data?: CreateDomainCommandOutput) => void
  ): void;
  createDomain(
    args: CreateDomainCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateDomainCommandOutput) => void
  ): void;
  createRepository(
    args: CreateRepositoryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateRepositoryCommandOutput>;
  createRepository(
    args: CreateRepositoryCommandInput,
    cb: (err: any, data?: CreateRepositoryCommandOutput) => void
  ): void;
  createRepository(
    args: CreateRepositoryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateRepositoryCommandOutput) => void
  ): void;
  deleteDomain(
    args: DeleteDomainCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteDomainCommandOutput>;
  deleteDomain(
    args: DeleteDomainCommandInput,
    cb: (err: any, data?: DeleteDomainCommandOutput) => void
  ): void;
  deleteDomain(
    args: DeleteDomainCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteDomainCommandOutput) => void
  ): void;
  deleteDomainPermissionsPolicy(
    args: DeleteDomainPermissionsPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteDomainPermissionsPolicyCommandOutput>;
  deleteDomainPermissionsPolicy(
    args: DeleteDomainPermissionsPolicyCommandInput,
    cb: (err: any, data?: DeleteDomainPermissionsPolicyCommandOutput) => void
  ): void;
  deleteDomainPermissionsPolicy(
    args: DeleteDomainPermissionsPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteDomainPermissionsPolicyCommandOutput) => void
  ): void;
  deletePackage(
    args: DeletePackageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeletePackageCommandOutput>;
  deletePackage(
    args: DeletePackageCommandInput,
    cb: (err: any, data?: DeletePackageCommandOutput) => void
  ): void;
  deletePackage(
    args: DeletePackageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeletePackageCommandOutput) => void
  ): void;
  deletePackageVersions(
    args: DeletePackageVersionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeletePackageVersionsCommandOutput>;
  deletePackageVersions(
    args: DeletePackageVersionsCommandInput,
    cb: (err: any, data?: DeletePackageVersionsCommandOutput) => void
  ): void;
  deletePackageVersions(
    args: DeletePackageVersionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeletePackageVersionsCommandOutput) => void
  ): void;
  deleteRepository(
    args: DeleteRepositoryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteRepositoryCommandOutput>;
  deleteRepository(
    args: DeleteRepositoryCommandInput,
    cb: (err: any, data?: DeleteRepositoryCommandOutput) => void
  ): void;
  deleteRepository(
    args: DeleteRepositoryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteRepositoryCommandOutput) => void
  ): void;
  deleteRepositoryPermissionsPolicy(
    args: DeleteRepositoryPermissionsPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteRepositoryPermissionsPolicyCommandOutput>;
  deleteRepositoryPermissionsPolicy(
    args: DeleteRepositoryPermissionsPolicyCommandInput,
    cb: (
      err: any,
      data?: DeleteRepositoryPermissionsPolicyCommandOutput
    ) => void
  ): void;
  deleteRepositoryPermissionsPolicy(
    args: DeleteRepositoryPermissionsPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DeleteRepositoryPermissionsPolicyCommandOutput
    ) => void
  ): void;
  describeDomain(
    args: DescribeDomainCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeDomainCommandOutput>;
  describeDomain(
    args: DescribeDomainCommandInput,
    cb: (err: any, data?: DescribeDomainCommandOutput) => void
  ): void;
  describeDomain(
    args: DescribeDomainCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeDomainCommandOutput) => void
  ): void;
  describePackage(
    args: DescribePackageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribePackageCommandOutput>;
  describePackage(
    args: DescribePackageCommandInput,
    cb: (err: any, data?: DescribePackageCommandOutput) => void
  ): void;
  describePackage(
    args: DescribePackageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribePackageCommandOutput) => void
  ): void;
  describePackageVersion(
    args: DescribePackageVersionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribePackageVersionCommandOutput>;
  describePackageVersion(
    args: DescribePackageVersionCommandInput,
    cb: (err: any, data?: DescribePackageVersionCommandOutput) => void
  ): void;
  describePackageVersion(
    args: DescribePackageVersionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribePackageVersionCommandOutput) => void
  ): void;
  describeRepository(
    args: DescribeRepositoryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeRepositoryCommandOutput>;
  describeRepository(
    args: DescribeRepositoryCommandInput,
    cb: (err: any, data?: DescribeRepositoryCommandOutput) => void
  ): void;
  describeRepository(
    args: DescribeRepositoryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeRepositoryCommandOutput) => void
  ): void;
  disassociateExternalConnection(
    args: DisassociateExternalConnectionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DisassociateExternalConnectionCommandOutput>;
  disassociateExternalConnection(
    args: DisassociateExternalConnectionCommandInput,
    cb: (err: any, data?: DisassociateExternalConnectionCommandOutput) => void
  ): void;
  disassociateExternalConnection(
    args: DisassociateExternalConnectionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DisassociateExternalConnectionCommandOutput) => void
  ): void;
  disposePackageVersions(
    args: DisposePackageVersionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DisposePackageVersionsCommandOutput>;
  disposePackageVersions(
    args: DisposePackageVersionsCommandInput,
    cb: (err: any, data?: DisposePackageVersionsCommandOutput) => void
  ): void;
  disposePackageVersions(
    args: DisposePackageVersionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DisposePackageVersionsCommandOutput) => void
  ): void;
  getAuthorizationToken(
    args: GetAuthorizationTokenCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetAuthorizationTokenCommandOutput>;
  getAuthorizationToken(
    args: GetAuthorizationTokenCommandInput,
    cb: (err: any, data?: GetAuthorizationTokenCommandOutput) => void
  ): void;
  getAuthorizationToken(
    args: GetAuthorizationTokenCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetAuthorizationTokenCommandOutput) => void
  ): void;
  getDomainPermissionsPolicy(
    args: GetDomainPermissionsPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetDomainPermissionsPolicyCommandOutput>;
  getDomainPermissionsPolicy(
    args: GetDomainPermissionsPolicyCommandInput,
    cb: (err: any, data?: GetDomainPermissionsPolicyCommandOutput) => void
  ): void;
  getDomainPermissionsPolicy(
    args: GetDomainPermissionsPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetDomainPermissionsPolicyCommandOutput) => void
  ): void;
  getPackageVersionAsset(
    args: GetPackageVersionAssetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetPackageVersionAssetCommandOutput>;
  getPackageVersionAsset(
    args: GetPackageVersionAssetCommandInput,
    cb: (err: any, data?: GetPackageVersionAssetCommandOutput) => void
  ): void;
  getPackageVersionAsset(
    args: GetPackageVersionAssetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetPackageVersionAssetCommandOutput) => void
  ): void;
  getPackageVersionReadme(
    args: GetPackageVersionReadmeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetPackageVersionReadmeCommandOutput>;
  getPackageVersionReadme(
    args: GetPackageVersionReadmeCommandInput,
    cb: (err: any, data?: GetPackageVersionReadmeCommandOutput) => void
  ): void;
  getPackageVersionReadme(
    args: GetPackageVersionReadmeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetPackageVersionReadmeCommandOutput) => void
  ): void;
  getRepositoryEndpoint(
    args: GetRepositoryEndpointCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetRepositoryEndpointCommandOutput>;
  getRepositoryEndpoint(
    args: GetRepositoryEndpointCommandInput,
    cb: (err: any, data?: GetRepositoryEndpointCommandOutput) => void
  ): void;
  getRepositoryEndpoint(
    args: GetRepositoryEndpointCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetRepositoryEndpointCommandOutput) => void
  ): void;
  getRepositoryPermissionsPolicy(
    args: GetRepositoryPermissionsPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetRepositoryPermissionsPolicyCommandOutput>;
  getRepositoryPermissionsPolicy(
    args: GetRepositoryPermissionsPolicyCommandInput,
    cb: (err: any, data?: GetRepositoryPermissionsPolicyCommandOutput) => void
  ): void;
  getRepositoryPermissionsPolicy(
    args: GetRepositoryPermissionsPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetRepositoryPermissionsPolicyCommandOutput) => void
  ): void;
  listDomains(
    args: ListDomainsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDomainsCommandOutput>;
  listDomains(
    args: ListDomainsCommandInput,
    cb: (err: any, data?: ListDomainsCommandOutput) => void
  ): void;
  listDomains(
    args: ListDomainsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDomainsCommandOutput) => void
  ): void;
  listPackages(
    args: ListPackagesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPackagesCommandOutput>;
  listPackages(
    args: ListPackagesCommandInput,
    cb: (err: any, data?: ListPackagesCommandOutput) => void
  ): void;
  listPackages(
    args: ListPackagesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPackagesCommandOutput) => void
  ): void;
  listPackageVersionAssets(
    args: ListPackageVersionAssetsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPackageVersionAssetsCommandOutput>;
  listPackageVersionAssets(
    args: ListPackageVersionAssetsCommandInput,
    cb: (err: any, data?: ListPackageVersionAssetsCommandOutput) => void
  ): void;
  listPackageVersionAssets(
    args: ListPackageVersionAssetsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPackageVersionAssetsCommandOutput) => void
  ): void;
  listPackageVersionDependencies(
    args: ListPackageVersionDependenciesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPackageVersionDependenciesCommandOutput>;
  listPackageVersionDependencies(
    args: ListPackageVersionDependenciesCommandInput,
    cb: (err: any, data?: ListPackageVersionDependenciesCommandOutput) => void
  ): void;
  listPackageVersionDependencies(
    args: ListPackageVersionDependenciesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPackageVersionDependenciesCommandOutput) => void
  ): void;
  listPackageVersions(
    args: ListPackageVersionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPackageVersionsCommandOutput>;
  listPackageVersions(
    args: ListPackageVersionsCommandInput,
    cb: (err: any, data?: ListPackageVersionsCommandOutput) => void
  ): void;
  listPackageVersions(
    args: ListPackageVersionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPackageVersionsCommandOutput) => void
  ): void;
  listRepositories(
    args: ListRepositoriesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListRepositoriesCommandOutput>;
  listRepositories(
    args: ListRepositoriesCommandInput,
    cb: (err: any, data?: ListRepositoriesCommandOutput) => void
  ): void;
  listRepositories(
    args: ListRepositoriesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListRepositoriesCommandOutput) => void
  ): void;
  listRepositoriesInDomain(
    args: ListRepositoriesInDomainCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListRepositoriesInDomainCommandOutput>;
  listRepositoriesInDomain(
    args: ListRepositoriesInDomainCommandInput,
    cb: (err: any, data?: ListRepositoriesInDomainCommandOutput) => void
  ): void;
  listRepositoriesInDomain(
    args: ListRepositoriesInDomainCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListRepositoriesInDomainCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  publishPackageVersion(
    args: PublishPackageVersionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PublishPackageVersionCommandOutput>;
  publishPackageVersion(
    args: PublishPackageVersionCommandInput,
    cb: (err: any, data?: PublishPackageVersionCommandOutput) => void
  ): void;
  publishPackageVersion(
    args: PublishPackageVersionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PublishPackageVersionCommandOutput) => void
  ): void;
  putDomainPermissionsPolicy(
    args: PutDomainPermissionsPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutDomainPermissionsPolicyCommandOutput>;
  putDomainPermissionsPolicy(
    args: PutDomainPermissionsPolicyCommandInput,
    cb: (err: any, data?: PutDomainPermissionsPolicyCommandOutput) => void
  ): void;
  putDomainPermissionsPolicy(
    args: PutDomainPermissionsPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutDomainPermissionsPolicyCommandOutput) => void
  ): void;
  putPackageOriginConfiguration(
    args: PutPackageOriginConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutPackageOriginConfigurationCommandOutput>;
  putPackageOriginConfiguration(
    args: PutPackageOriginConfigurationCommandInput,
    cb: (err: any, data?: PutPackageOriginConfigurationCommandOutput) => void
  ): void;
  putPackageOriginConfiguration(
    args: PutPackageOriginConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutPackageOriginConfigurationCommandOutput) => void
  ): void;
  putRepositoryPermissionsPolicy(
    args: PutRepositoryPermissionsPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutRepositoryPermissionsPolicyCommandOutput>;
  putRepositoryPermissionsPolicy(
    args: PutRepositoryPermissionsPolicyCommandInput,
    cb: (err: any, data?: PutRepositoryPermissionsPolicyCommandOutput) => void
  ): void;
  putRepositoryPermissionsPolicy(
    args: PutRepositoryPermissionsPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutRepositoryPermissionsPolicyCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updatePackageVersionsStatus(
    args: UpdatePackageVersionsStatusCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdatePackageVersionsStatusCommandOutput>;
  updatePackageVersionsStatus(
    args: UpdatePackageVersionsStatusCommandInput,
    cb: (err: any, data?: UpdatePackageVersionsStatusCommandOutput) => void
  ): void;
  updatePackageVersionsStatus(
    args: UpdatePackageVersionsStatusCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdatePackageVersionsStatusCommandOutput) => void
  ): void;
  updateRepository(
    args: UpdateRepositoryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateRepositoryCommandOutput>;
  updateRepository(
    args: UpdateRepositoryCommandInput,
    cb: (err: any, data?: UpdateRepositoryCommandOutput) => void
  ): void;
  updateRepository(
    args: UpdateRepositoryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateRepositoryCommandOutput) => void
  ): void;
}
export declare class Codeartifact
  extends CodeartifactClient
  implements Codeartifact {}
