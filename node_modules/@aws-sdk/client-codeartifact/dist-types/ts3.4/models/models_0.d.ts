import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { StreamingBlobTypes } from "@smithy/types";
import { CodeartifactServiceException as __BaseException } from "./CodeartifactServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AllowPublish: {
  readonly ALLOW: "ALLOW";
  readonly BLOCK: "BLOCK";
};
export type AllowPublish = (typeof AllowPublish)[keyof typeof AllowPublish];
export declare const AllowUpstream: {
  readonly ALLOW: "ALLOW";
  readonly BLOCK: "BLOCK";
};
export type AllowUpstream = (typeof AllowUpstream)[keyof typeof AllowUpstream];
export declare const HashAlgorithm: {
  readonly MD5: "MD5";
  readonly SHA1: "SHA-1";
  readonly SHA256: "SHA-256";
  readonly SHA512: "SHA-512";
};
export type HashAlgorithm = (typeof HashAlgorithm)[keyof typeof HashAlgorithm];
export interface AssetSummary {
  name: string | undefined;
  size?: number;
  hashes?: Partial<Record<HashAlgorithm, string>>;
}
export interface AssociateExternalConnectionRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  externalConnection: string | undefined;
}
export declare const PackageFormat: {
  readonly GENERIC: "generic";
  readonly MAVEN: "maven";
  readonly NPM: "npm";
  readonly NUGET: "nuget";
  readonly PYPI: "pypi";
  readonly SWIFT: "swift";
};
export type PackageFormat = (typeof PackageFormat)[keyof typeof PackageFormat];
export declare const ExternalConnectionStatus: {
  readonly AVAILABLE: "Available";
};
export type ExternalConnectionStatus =
  (typeof ExternalConnectionStatus)[keyof typeof ExternalConnectionStatus];
export interface RepositoryExternalConnectionInfo {
  externalConnectionName?: string;
  packageFormat?: PackageFormat;
  status?: ExternalConnectionStatus;
}
export interface UpstreamRepositoryInfo {
  repositoryName?: string;
}
export interface RepositoryDescription {
  name?: string;
  administratorAccount?: string;
  domainName?: string;
  domainOwner?: string;
  arn?: string;
  description?: string;
  upstreams?: UpstreamRepositoryInfo[];
  externalConnections?: RepositoryExternalConnectionInfo[];
  createdTime?: Date;
}
export interface AssociateExternalConnectionResult {
  repository?: RepositoryDescription;
}
export declare const ResourceType: {
  readonly ASSET: "asset";
  readonly DOMAIN: "domain";
  readonly PACKAGE: "package";
  readonly PACKAGE_VERSION: "package-version";
  readonly REPOSITORY: "repository";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: ResourceType;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: ResourceType;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: ResourceType;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CANNOT_PARSE";
  readonly ENCRYPTION_KEY_ERROR: "ENCRYPTION_KEY_ERROR";
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly OTHER: "OTHER";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason?: ValidationExceptionReason;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CopyPackageVersionsRequest {
  domain: string | undefined;
  domainOwner?: string;
  sourceRepository: string | undefined;
  destinationRepository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  versions?: string[];
  versionRevisions?: Record<string, string>;
  allowOverwrite?: boolean;
  includeFromUpstream?: boolean;
}
export declare const PackageVersionErrorCode: {
  readonly ALREADY_EXISTS: "ALREADY_EXISTS";
  readonly MISMATCHED_REVISION: "MISMATCHED_REVISION";
  readonly MISMATCHED_STATUS: "MISMATCHED_STATUS";
  readonly NOT_ALLOWED: "NOT_ALLOWED";
  readonly NOT_FOUND: "NOT_FOUND";
  readonly SKIPPED: "SKIPPED";
};
export type PackageVersionErrorCode =
  (typeof PackageVersionErrorCode)[keyof typeof PackageVersionErrorCode];
export interface PackageVersionError {
  errorCode?: PackageVersionErrorCode;
  errorMessage?: string;
}
export declare const PackageVersionStatus: {
  readonly ARCHIVED: "Archived";
  readonly DELETED: "Deleted";
  readonly DISPOSED: "Disposed";
  readonly PUBLISHED: "Published";
  readonly UNFINISHED: "Unfinished";
  readonly UNLISTED: "Unlisted";
};
export type PackageVersionStatus =
  (typeof PackageVersionStatus)[keyof typeof PackageVersionStatus];
export interface SuccessfulPackageVersionInfo {
  revision?: string;
  status?: PackageVersionStatus;
}
export interface CopyPackageVersionsResult {
  successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
  failedVersions?: Record<string, PackageVersionError>;
}
export interface Tag {
  key: string | undefined;
  value: string | undefined;
}
export interface CreateDomainRequest {
  domain: string | undefined;
  encryptionKey?: string;
  tags?: Tag[];
}
export declare const DomainStatus: {
  readonly ACTIVE: "Active";
  readonly DELETED: "Deleted";
};
export type DomainStatus = (typeof DomainStatus)[keyof typeof DomainStatus];
export interface DomainDescription {
  name?: string;
  owner?: string;
  arn?: string;
  status?: DomainStatus;
  createdTime?: Date;
  encryptionKey?: string;
  repositoryCount?: number;
  assetSizeBytes?: number;
  s3BucketArn?: string;
}
export interface CreateDomainResult {
  domain?: DomainDescription;
}
export interface UpstreamRepository {
  repositoryName: string | undefined;
}
export interface CreateRepositoryRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  description?: string;
  upstreams?: UpstreamRepository[];
  tags?: Tag[];
}
export interface CreateRepositoryResult {
  repository?: RepositoryDescription;
}
export interface DeleteDomainRequest {
  domain: string | undefined;
  domainOwner?: string;
}
export interface DeleteDomainResult {
  domain?: DomainDescription;
}
export interface DeleteDomainPermissionsPolicyRequest {
  domain: string | undefined;
  domainOwner?: string;
  policyRevision?: string;
}
export interface ResourcePolicy {
  resourceArn?: string;
  revision?: string;
  document?: string;
}
export interface DeleteDomainPermissionsPolicyResult {
  policy?: ResourcePolicy;
}
export interface DeletePackageRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
}
export interface PackageOriginRestrictions {
  publish: AllowPublish | undefined;
  upstream: AllowUpstream | undefined;
}
export interface PackageOriginConfiguration {
  restrictions?: PackageOriginRestrictions;
}
export interface PackageSummary {
  format?: PackageFormat;
  namespace?: string;
  package?: string;
  originConfiguration?: PackageOriginConfiguration;
}
export interface DeletePackageResult {
  deletedPackage?: PackageSummary;
}
export interface DeletePackageVersionsRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  versions: string[] | undefined;
  expectedStatus?: PackageVersionStatus;
}
export interface DeletePackageVersionsResult {
  successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
  failedVersions?: Record<string, PackageVersionError>;
}
export interface DeleteRepositoryRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
}
export interface DeleteRepositoryResult {
  repository?: RepositoryDescription;
}
export interface DeleteRepositoryPermissionsPolicyRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  policyRevision?: string;
}
export interface DeleteRepositoryPermissionsPolicyResult {
  policy?: ResourcePolicy;
}
export interface DescribeDomainRequest {
  domain: string | undefined;
  domainOwner?: string;
}
export interface DescribeDomainResult {
  domain?: DomainDescription;
}
export interface DescribePackageRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
}
export interface PackageDescription {
  format?: PackageFormat;
  namespace?: string;
  name?: string;
  originConfiguration?: PackageOriginConfiguration;
}
export interface DescribePackageResult {
  package: PackageDescription | undefined;
}
export interface DescribePackageVersionRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  packageVersion: string | undefined;
}
export interface LicenseInfo {
  name?: string;
  url?: string;
}
export interface DomainEntryPoint {
  repositoryName?: string;
  externalConnectionName?: string;
}
export declare const PackageVersionOriginType: {
  readonly EXTERNAL: "EXTERNAL";
  readonly INTERNAL: "INTERNAL";
  readonly UNKNOWN: "UNKNOWN";
};
export type PackageVersionOriginType =
  (typeof PackageVersionOriginType)[keyof typeof PackageVersionOriginType];
export interface PackageVersionOrigin {
  domainEntryPoint?: DomainEntryPoint;
  originType?: PackageVersionOriginType;
}
export interface PackageVersionDescription {
  format?: PackageFormat;
  namespace?: string;
  packageName?: string;
  displayName?: string;
  version?: string;
  summary?: string;
  homePage?: string;
  sourceCodeRepository?: string;
  publishedTime?: Date;
  licenses?: LicenseInfo[];
  revision?: string;
  status?: PackageVersionStatus;
  origin?: PackageVersionOrigin;
}
export interface DescribePackageVersionResult {
  packageVersion: PackageVersionDescription | undefined;
}
export interface DescribeRepositoryRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
}
export interface DescribeRepositoryResult {
  repository?: RepositoryDescription;
}
export interface DisassociateExternalConnectionRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  externalConnection: string | undefined;
}
export interface DisassociateExternalConnectionResult {
  repository?: RepositoryDescription;
}
export interface DisposePackageVersionsRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  versions: string[] | undefined;
  versionRevisions?: Record<string, string>;
  expectedStatus?: PackageVersionStatus;
}
export interface DisposePackageVersionsResult {
  successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
  failedVersions?: Record<string, PackageVersionError>;
}
export interface GetAuthorizationTokenRequest {
  domain: string | undefined;
  domainOwner?: string;
  durationSeconds?: number;
}
export interface GetAuthorizationTokenResult {
  authorizationToken?: string;
  expiration?: Date;
}
export interface GetDomainPermissionsPolicyRequest {
  domain: string | undefined;
  domainOwner?: string;
}
export interface GetDomainPermissionsPolicyResult {
  policy?: ResourcePolicy;
}
export interface GetPackageVersionAssetRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  packageVersion: string | undefined;
  asset: string | undefined;
  packageVersionRevision?: string;
}
export interface GetPackageVersionAssetResult {
  asset?: StreamingBlobTypes;
  assetName?: string;
  packageVersion?: string;
  packageVersionRevision?: string;
}
export interface GetPackageVersionReadmeRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  packageVersion: string | undefined;
}
export interface GetPackageVersionReadmeResult {
  format?: PackageFormat;
  namespace?: string;
  package?: string;
  version?: string;
  versionRevision?: string;
  readme?: string;
}
export interface GetRepositoryEndpointRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
}
export interface GetRepositoryEndpointResult {
  repositoryEndpoint?: string;
}
export interface GetRepositoryPermissionsPolicyRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
}
export interface GetRepositoryPermissionsPolicyResult {
  policy?: ResourcePolicy;
}
export interface ListDomainsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface DomainSummary {
  name?: string;
  owner?: string;
  arn?: string;
  status?: DomainStatus;
  createdTime?: Date;
  encryptionKey?: string;
}
export interface ListDomainsResult {
  domains?: DomainSummary[];
  nextToken?: string;
}
export interface ListPackagesRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format?: PackageFormat;
  namespace?: string;
  packagePrefix?: string;
  maxResults?: number;
  nextToken?: string;
  publish?: AllowPublish;
  upstream?: AllowUpstream;
}
export interface ListPackagesResult {
  packages?: PackageSummary[];
  nextToken?: string;
}
export interface ListPackageVersionAssetsRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  packageVersion: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListPackageVersionAssetsResult {
  format?: PackageFormat;
  namespace?: string;
  package?: string;
  version?: string;
  versionRevision?: string;
  nextToken?: string;
  assets?: AssetSummary[];
}
export interface ListPackageVersionDependenciesRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  packageVersion: string | undefined;
  nextToken?: string;
}
export interface PackageDependency {
  namespace?: string;
  package?: string;
  dependencyType?: string;
  versionRequirement?: string;
}
export interface ListPackageVersionDependenciesResult {
  format?: PackageFormat;
  namespace?: string;
  package?: string;
  version?: string;
  versionRevision?: string;
  nextToken?: string;
  dependencies?: PackageDependency[];
}
export declare const PackageVersionSortType: {
  readonly PUBLISHED_TIME: "PUBLISHED_TIME";
};
export type PackageVersionSortType =
  (typeof PackageVersionSortType)[keyof typeof PackageVersionSortType];
export interface ListPackageVersionsRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  status?: PackageVersionStatus;
  sortBy?: PackageVersionSortType;
  maxResults?: number;
  nextToken?: string;
  originType?: PackageVersionOriginType;
}
export interface PackageVersionSummary {
  version: string | undefined;
  revision?: string;
  status: PackageVersionStatus | undefined;
  origin?: PackageVersionOrigin;
}
export interface ListPackageVersionsResult {
  defaultDisplayVersion?: string;
  format?: PackageFormat;
  namespace?: string;
  package?: string;
  versions?: PackageVersionSummary[];
  nextToken?: string;
}
export interface ListRepositoriesRequest {
  repositoryPrefix?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface RepositorySummary {
  name?: string;
  administratorAccount?: string;
  domainName?: string;
  domainOwner?: string;
  arn?: string;
  description?: string;
  createdTime?: Date;
}
export interface ListRepositoriesResult {
  repositories?: RepositorySummary[];
  nextToken?: string;
}
export interface ListRepositoriesInDomainRequest {
  domain: string | undefined;
  domainOwner?: string;
  administratorAccount?: string;
  repositoryPrefix?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface ListRepositoriesInDomainResult {
  repositories?: RepositorySummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResult {
  tags?: Tag[];
}
export interface PublishPackageVersionRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  packageVersion: string | undefined;
  assetContent: StreamingBlobTypes | undefined;
  assetName: string | undefined;
  assetSHA256: string | undefined;
  unfinished?: boolean;
}
export interface PublishPackageVersionResult {
  format?: PackageFormat;
  namespace?: string;
  package?: string;
  version?: string;
  versionRevision?: string;
  status?: PackageVersionStatus;
  asset?: AssetSummary;
}
export interface PutDomainPermissionsPolicyRequest {
  domain: string | undefined;
  domainOwner?: string;
  policyRevision?: string;
  policyDocument: string | undefined;
}
export interface PutDomainPermissionsPolicyResult {
  policy?: ResourcePolicy;
}
export interface PutPackageOriginConfigurationRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  restrictions: PackageOriginRestrictions | undefined;
}
export interface PutPackageOriginConfigurationResult {
  originConfiguration?: PackageOriginConfiguration;
}
export interface PutRepositoryPermissionsPolicyRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  policyRevision?: string;
  policyDocument: string | undefined;
}
export interface PutRepositoryPermissionsPolicyResult {
  policy?: ResourcePolicy;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResult {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResult {}
export interface UpdatePackageVersionsStatusRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  format: PackageFormat | undefined;
  namespace?: string;
  package: string | undefined;
  versions: string[] | undefined;
  versionRevisions?: Record<string, string>;
  expectedStatus?: PackageVersionStatus;
  targetStatus: PackageVersionStatus | undefined;
}
export interface UpdatePackageVersionsStatusResult {
  successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
  failedVersions?: Record<string, PackageVersionError>;
}
export interface UpdateRepositoryRequest {
  domain: string | undefined;
  domainOwner?: string;
  repository: string | undefined;
  description?: string;
  upstreams?: UpstreamRepository[];
}
export interface UpdateRepositoryResult {
  repository?: RepositoryDescription;
}
export declare const GetPackageVersionAssetResultFilterSensitiveLog: (
  obj: GetPackageVersionAssetResult
) => any;
export declare const PublishPackageVersionRequestFilterSensitiveLog: (
  obj: PublishPackageVersionRequest
) => any;
