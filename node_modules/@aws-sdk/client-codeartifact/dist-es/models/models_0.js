import { CodeartifactServiceException as __BaseException } from "./CodeartifactServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const AllowPublish = {
    ALLOW: "ALLOW",
    BLOCK: "BLOCK",
};
export const AllowUpstream = {
    ALLOW: "ALLOW",
    BLOCK: "BLOCK",
};
export const HashAlgorithm = {
    MD5: "MD5",
    SHA1: "SHA-1",
    SHA256: "SHA-256",
    SHA512: "SHA-512",
};
export const PackageFormat = {
    GENERIC: "generic",
    MAVEN: "maven",
    NPM: "npm",
    NUGET: "nuget",
    PYPI: "pypi",
    SWIFT: "swift",
};
export const ExternalConnectionStatus = {
    AVAILABLE: "Available",
};
export const ResourceType = {
    ASSET: "asset",
    DOMAIN: "domain",
    PACKAGE: "package",
    PACKAGE_VERSION: "package-version",
    REPOSITORY: "repository",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CANNOT_PARSE",
    ENCRYPTION_KEY_ERROR: "ENCRYPTION_KEY_ERROR",
    FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED",
    OTHER: "OTHER",
    UNKNOWN_OPERATION: "UNKNOWN_OPERATION",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.reason = opts.reason;
    }
}
export const PackageVersionErrorCode = {
    ALREADY_EXISTS: "ALREADY_EXISTS",
    MISMATCHED_REVISION: "MISMATCHED_REVISION",
    MISMATCHED_STATUS: "MISMATCHED_STATUS",
    NOT_ALLOWED: "NOT_ALLOWED",
    NOT_FOUND: "NOT_FOUND",
    SKIPPED: "SKIPPED",
};
export const PackageVersionStatus = {
    ARCHIVED: "Archived",
    DELETED: "Deleted",
    DISPOSED: "Disposed",
    PUBLISHED: "Published",
    UNFINISHED: "Unfinished",
    UNLISTED: "Unlisted",
};
export const DomainStatus = {
    ACTIVE: "Active",
    DELETED: "Deleted",
};
export const PackageVersionOriginType = {
    EXTERNAL: "EXTERNAL",
    INTERNAL: "INTERNAL",
    UNKNOWN: "UNKNOWN",
};
export const PackageVersionSortType = {
    PUBLISHED_TIME: "PUBLISHED_TIME",
};
export const GetPackageVersionAssetResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PublishPackageVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
